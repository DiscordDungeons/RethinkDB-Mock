// Generated by CoffeeScript 1.12.4
var Query, Result, actions, define, getArity, getType, isArray, isArrayOrObject, isConstructor, isFalse, isNullError, methods, setProto, sliceArray, statics, utils, variadic;

isConstructor = require("isConstructor");

sliceArray = require("sliceArray");

setProto = require("setProto");

actions = require("./actions");

Result = require("./Result");

utils = require("./utils");

isArray = Array.isArray;

define = Object.defineProperty;

Query = function(parent, type) {
  var query;
  query = function(key) {
    return query.bracket(key);
  };
  if (parent) {
    query._db = parent._db;
    query._type = type || parent._type;
    query._parent = parent;
  } else {
    query._db = null;
    query._type = type || null;
  }
  return setProto(query, Query.prototype);
};

variadic = function(keys) {
  return keys.split(" ").forEach(function(key) {
    methods[key] = function() {
      return this._then(key, arguments);
    };
  });
};

methods = {};

methods["default"] = function(value) {
  return Query._default(this, value);
};

methods["do"] = function() {
  var args;
  args = sliceArray(arguments);
  return Query._do(this, args);
};

variadic("eq ne gt lt ge le or and add sub mul div");

methods.nth = function(index) {
  return this._then("nth", arguments);
};

methods.bracket = function(key) {
  return this._then("bracket", arguments);
};

methods.getField = function(field) {
  return this._then("getField", arguments);
};

variadic("hasFields");

methods.offsetsOf = function(value) {
  return this._then("offsetsOf", arguments);
};

methods.contains = function(value) {
  return this._then("contains", arguments);
};

methods.orderBy = function(field) {
  return this._then("orderBy", arguments);
};

methods.filter = function(filter, options) {
  return this._then("filter", arguments);
};

methods.isEmpty = function() {
  return this._then("isEmpty");
};

methods.count = function() {
  return this._then("count");
};

methods.skip = function(count) {
  return this._then("skip", arguments);
};

methods.limit = function(count) {
  return this._then("limit", arguments);
};

variadic("slice merge pluck without");

methods.typeOf = function() {
  return this._then("typeOf");
};

methods.branch = function() {
  var args;
  args = sliceArray(arguments);
  if (args.length < 2) {
    throw Error("`branch` takes at least 2 arguments, " + args.length + " provided");
  }
  return Query._branch(this, args);
};

methods.update = function(patch) {
  return this._then("update", arguments);
};

methods.replace = function(values) {
  return this._then("replace", arguments);
};

methods["delete"] = function() {
  return this._then("delete");
};

methods.run = function() {
  return Promise.resolve().then(this._run.bind(this));
};

methods.then = function(onFulfilled) {
  return this.run().then(onFulfilled);
};

methods["catch"] = function(onRejected) {
  return this.run()["catch"](onRejected);
};

methods._then = function(action, args) {
  var query;
  query = Query(this, getType(action));
  query._action = action;
  if (args) {
    query._args = args;
    query._parseArgs();
  }
  return query;
};

methods._parseArgs = function() {
  var args, arity, index;
  arity = getArity(this._action);
  args = isArray(this._args) ? this._args : sliceArray(this._args);
  if (args.length < arity[0]) {
    throw Error("`" + this._action + "` takes at least " + arity[0] + " argument" + (arity[0] === 1 ? "" : "s") + ", " + args.length + " provided");
  }
  if (args.length > arity[1]) {
    throw Error("`" + this._action + "` takes at most " + arity[1] + " argument" + (arity[1] === 1 ? "" : "s") + ", " + args.length + " provided");
  }
  index = -1;
  while (++index < args.length) {
    if (!utils.isQuery(args[index])) {
      args[index] = Query._expr(args[index]);
    }
  }
  this._args = args;
};

methods._eval = function(ctx) {
  var action, args, arity, result;
  action = this._action;
  result = this._parent._eval(ctx);
  if (isConstructor(action, Function)) {
    return action.call(ctx, result);
  }
  if (isConstructor(action, String)) {
    args = utils.resolve(this._args);
    arity = getArity(action)[1];
    result = arity === 0 ? actions[action].call(ctx, result) : arity === 1 ? actions[action].call(ctx, result, args[0]) : arity === 2 ? actions[action].call(ctx, result, args[0], args[1]) : actions[action].call(ctx, result, args);
  }
  ctx.type = isConstructor(this._type, Function) ? this._type.call(this, ctx, args) : this._type;
  return result;
};

methods._run = function(ctx) {
  var result;
  if (ctx == null) {
    ctx = {};
  }
  ctx.db = this._db;
  result = this._eval(ctx);
  if (/TABLE|SEQUENCE|SELECTION/.test(ctx.type)) {
    return utils.clone(result);
  }
  return result;
};

statics = {};

statics._do = function(parent, args) {
  var last, query, value;
  if (!args.length) {
    return parent;
  }
  query = Query();
  query._parent = parent;
  last = args.pop();
  args.unshift(parent);
  if (isConstructor(last, Function)) {
    args = args.slice(0, last.length).map(Result);
    value = last.apply(null, args);
    if (value === void 0) {
      throw Error("Anonymous function returned `undefined`. Did you forget a `return`?");
    }
    if (!utils.isQuery(value)) {
      value = Query._expr(value);
    }
    query._eval = function(ctx) {
      var result;
      result = value._eval(ctx);
      args.forEach(function(arg) {
        return arg._reset();
      });
      return result;
    };
    return query;
  }
  query._eval = function(ctx) {
    args.forEach(utils.resolve);
    return utils.resolve(last, ctx);
  };
  return query;
};

statics._default = function(parent, value) {
  var query;
  if (!utils.isQuery(value)) {
    value = Query._expr(value);
  }
  query = Query();
  query._parent = parent;
  query._eval = function(ctx) {
    var error, result;
    try {
      result = parent._eval(ctx);
    } catch (error1) {
      error = error1;
      if (!isNullError(error)) {
        throw error;
      }
    }
    return result != null ? result : value._eval(ctx);
  };
  return query;
};

statics._branch = function(cond, args) {
  var lastIndex, query;
  if (args.length % 2) {
    throw Error("`branch` cannot be called with an even number of arguments");
  }
  lastIndex = args.length - 1;
  query = Query();
  query._parent = cond;
  query._eval = function(ctx) {
    var index;
    if (!isFalse(cond._eval({}))) {
      return utils.resolve(args[0], ctx);
    }
    index = -1;
    while ((index += 2) !== lastIndex) {
      if (!isFalse(utils.resolve(args[index]))) {
        return utils.resolve(args[index + 1], ctx);
      }
    }
    return utils.resolve(args[lastIndex], ctx);
  };
  return query;
};

statics._expr = function(expr) {
  var query, values;
  if (expr === void 0) {
    throw Error("Cannot convert `undefined` with r.expr()");
  }
  if (isConstructor(expr, Number) && !isFinite(expr)) {
    throw Error("Cannot convert `" + expr + "` to JSON");
  }
  if (utils.isQuery(expr)) {
    return expr;
  }
  query = Query(null, "DATUM");
  if (isArrayOrObject(expr)) {
    values = expr;
    expr = isArray(values) ? [] : {};
    Object.keys(values).forEach(function(key) {
      var value;
      value = values[key];
      if (!utils.isQuery(value)) {
        expr[key] = Query._expr(value);
        return;
      }
      if (/DATUM|SELECTION/.test(value._type)) {
        expr[key] = value;
        return;
      }
      throw Error("Expected type DATUM but found " + value._type);
    });
    query._eval = function(ctx) {
      ctx.type = this._type;
      return utils.resolve(expr);
    };
  } else {
    query._eval = function(ctx) {
      ctx.type = this._type;
      return expr;
    };
  }
  return query;
};

Object.keys(methods).forEach(function(key) {
  return define(Query.prototype, key, {
    value: methods[key],
    writable: true
  });
});

Object.keys(statics).forEach(function(key) {
  return define(Query, key, {
    value: statics[key]
  });
});

module.exports = Query;

isFalse = function(value) {
  return (value === null) || (value === false);
};

isArrayOrObject = function(value) {
  return isArray(value) || isConstructor(value, Object);
};

isNullError = function(error) {
  return !error || /(Index out of bounds|No attribute|null)/i.test(error.message);
};

getType = (function() {
  var DATUM, seqRE, sequential, types;
  DATUM = "DATUM";
  seqRE = /TABLE|SEQUENCE/;
  sequential = function(ctx) {
    if (seqRE.test(ctx.type)) {
      return "SEQUENCE";
    }
    return DATUM;
  };
  types = {
    eq: DATUM,
    ne: DATUM,
    gt: DATUM,
    lt: DATUM,
    ge: DATUM,
    le: DATUM,
    or: DATUM,
    and: DATUM,
    add: DATUM,
    sub: DATUM,
    mul: DATUM,
    div: DATUM,
    nth: function(ctx) {
      if (seqRE.test(ctx.type)) {
        return "SELECTION";
      }
      return DATUM;
    },
    bracket: function(ctx, args) {
      if (!isConstructor(args[0], String)) {
        if (seqRE.test(ctx.type)) {
          return "SELECTION";
        }
      }
      return DATUM;
    },
    getField: DATUM,
    hasFields: sequential,
    offsetsOf: DATUM,
    contains: DATUM,
    orderBy: sequential,
    filter: sequential,
    fold: null,
    isEmpty: DATUM,
    count: DATUM,
    skip: sequential,
    limit: sequential,
    slice: sequential,
    merge: DATUM,
    pluck: DATUM,
    without: DATUM,
    typeOf: DATUM,
    update: DATUM,
    replace: DATUM,
    "delete": DATUM
  };
  return function(action) {
    return types[action];
  };
})();

getArity = (function() {
  var arity, none, one, onePlus, oneTwo, two;
  none = [0, 0];
  one = [1, 1];
  two = [2, 2];
  oneTwo = [1, 2];
  onePlus = [1, 2e308];
  arity = {
    eq: onePlus,
    ne: onePlus,
    gt: onePlus,
    lt: onePlus,
    ge: onePlus,
    le: onePlus,
    or: onePlus,
    and: onePlus,
    add: onePlus,
    sub: onePlus,
    mul: onePlus,
    div: onePlus,
    nth: one,
    bracket: one,
    getField: one,
    hasFields: onePlus,
    offsetsOf: one,
    contains: one,
    orderBy: one,
    filter: oneTwo,
    fold: two,
    isEmpty: none,
    count: none,
    skip: one,
    limit: one,
    slice: onePlus,
    merge: onePlus,
    pluck: onePlus,
    without: onePlus,
    typeOf: none,
    getAll: onePlus,
    insert: oneTwo,
    update: one,
    replace: one,
    "delete": none
  };
  return function(action) {
    return arity[action];
  };
})();
