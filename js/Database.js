// Generated by CoffeeScript 1.12.4
var Database, Query, Table, assertType, define, isArray, isConstructor, methods, sliceArray, utils;

isConstructor = require("isConstructor");

assertType = require("assertType");

sliceArray = require("sliceArray");

Table = require("./Table");

Query = require("./Query");

utils = require("./utils");

isArray = Array.isArray;

define = Object.defineProperty;

Database = function(name) {
  assertType(name, String);
  this._name = name;
  define(this, "_tables", {
    value: {},
    writable: true
  });
  return this;
};

methods = {};

methods.init = function(tables) {
  assertType(tables, Object);
  this._tables = tables;
};

methods.table = function(tableId) {
  var self;
  self = Table(this, tableId);
  if (tableId === void 0) {
    self._error = Error("Cannot convert `undefined` with r.expr()");
  }
  return self;
};

methods.tableCreate = function(tableId) {
  throw Error("Not implemented");
};

methods.tableDrop = function(tableId) {
  throw Error("Not implemented");
};

methods.uuid = require("./utils/uuid");

methods.typeOf = function(value) {
  return Query._expr(value).typeOf();
};

methods.expr = Query._expr;

methods.object = function() {
  var args, self;
  args = sliceArray(arguments);
  if (args.length % 2) {
    throw Error("Expected an even number of arguments");
  }
  args.forEach(function(arg, index) {
    if (arg === void 0) {
      throw Error("Argument " + index + " to object may not be `undefined`");
    }
  });
  self = Query();
  self._type = "DATUM";
  self._eval = function(ctx) {
    var index, key, result;
    result = {};
    index = 0;
    while (index < args.length) {
      key = utils.resolve(args[index]);
      utils.expect(key, "STRING");
      result[key] = utils.resolve(args[index + 1]);
      index += 2;
    }
    ctx.type = this._type;
    return result;
  };
  return self;
};

methods.asc = function(index) {
  return {
    ASC: true,
    index: index
  };
};

methods.desc = function(index) {
  return {
    DESC: true,
    index: index
  };
};

Object.keys(methods).forEach(function(key) {
  return define(Database.prototype, key, {
    value: methods[key]
  });
});

module.exports = Database;
